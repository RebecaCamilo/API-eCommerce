openapi: 3.0.3
info:
  title: Ecommerce - OpenApi
  contact:
    email: apiteam@swagger.io
  version: 1.0.0
servers:
  - url: https://ecommerce.swagger.io/api/v1
tags:
  - name: order
    description: Everything about your Orders
  - name: product
    description: Everything about the Products
  - name: user
    description: Operations about users
paths:
  /api/orders:
    get:
      tags:
        - order
      summary: Get all orders
      description: Get all orders
      operationId: getAllOrder
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '500':
          description: Internal Server Error
      security:
        - petstore_auth:
            - write:pets
            - read:pets

    post:
      tags:
        - order
      summary: Create new order
      description: Create new order
      operationId: createNewOrder
      requestBody:
        description: Create new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /api/orders/myorders:
    get:
      tags:
        - order
      summary: Get logged in user orders
      description: Get logged in user orders
      operationId: GetLoggedInUserOrders
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /api/orders/{id}:
    get:
      tags:
        - order
      summary: Get order by ID
      description: Get order by ID
      operationId: GetOrderById
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /api/orders/{id}/pay:
    put:
      tags:
        - order
      summary: Update order to paid
      description: Update order to paid
      operationId: UpdateOrderToPaid
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets

  /api/orders/{id}/deliver:
    get:
      tags:
        - order
      summary: Update order to delivered
      description: Update order to delivered
      operationId: UpdateOrderToDelivered
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /api/products:
    get:
      tags:
        - product
      summary: Fetch all products
      description: Fetch all products
      operationId: FetchAllProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

    post:
      tags:
        - product
      summary: Create a product
      description: Create a product
      operationId: CreateAProduct
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

  /api/products/top:
    get:
      tags:
        - product
      summary: Get top rated products
      description: Get top rated products
      operationId: GetTopRatedProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []

  /api/products/{id}:
    get:
      tags:
        - product
      summary: Fetch single product
      description: Fetch single product
      operationId: FetchSingleProduct
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    put:
      tags:
        - product
      summary: Update a product
      description: Update a product
      operationId: UpdateAProduct
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    delete:
      tags:
        - product
      summary: Delete a product
      description: Delete a product
      operationId: DeleteAProduct
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/products/{id}/reviews:
    post:
      tags:
        - product
      summary: Create new review
      description: Create new review
      operationId: CreateNewReview
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  # 3.6 @desc    Get all users
  #     @route   GET /api/users
  /api/users:
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users
      operationId: GetAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    # 3.2 @desc    Register a new user
    #     @route   POST /api/users
    post:
      tags:
        - user
      summary: Register a new user
      description: Register a new user
      operationId: RegisterANewUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'


  # 3.8 @desc    Get user by ID
  #     @route   GET /api/users/:id
  /api/users/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Get user by ID
      operationId: GetUserById
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    # 3.9 @desc    Update user
    #     @route   PUT /api/users/:id
    put:
      tags:
        - user
      summary: Update user
      description: Update user
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    # 3.7 @desc    Delete user
    #     @route   DELETE /api/users/:id
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete user
      operationId: DeleteUser
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception


  #   3.1 @desc    Auth user & get token
  #     @route   POST /api/users/auth
  /api/users/auth:
    post:
      tags:
        - user
      summary: Auth user & get token
      description: Auth user & get token
      operationId: AuthUser&GetToken
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied

  # 3.3 @desc    Logout user / clear cookie
  #     @route   POST /api/users/logout
  /api/users/logout:
    post:
      tags:
        - user
      summary: Logout user / clear cookie
      description: Logout user / clear cookie
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  # 3.4 @desc    Get user profile
  #     @route   GET /api/users/profile
  /api/users/profile:
    get:
      tags:
        - user
      summary: Get user profile
      description: Get user profile
      operationId: GetUserProfile
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    # 3.5 @desc    Update user profile
    #     @route   PUT /api/users/profile
    put:
      tags:
        - user
      summary: Update user profile
      description: Update user profile
      operationId: UpdateUserProfile
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header